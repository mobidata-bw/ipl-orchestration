# UID and GID of the user which should be used to run most services in common uid:gid format. Often something like 1000:1000
# You can determine your this line with your own uid and gid by `echo "DOCKER_LOCAL_USER=$(shell id -u):$(shell id -g)"`
DOCKER_LOCAL_USER=1000:1000

# time zone, must be a valid IANA tz database identifier
# https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
# https://en.wikipedia.org/wiki/Tz_database
TZ=Europe/Berlin

TRANSFORMER_PROXY_IMAGE=ghcr.io/mobidata-bw/ipl-proxy:2024-06-19T06-45
TRANSFORMER_PROXY_PORT=8400

LAMASSU_IMAGE=entur/lamassu:2024-06-19T21-49
LAMASSU_PORT=8500
LAMASSU_ADMIN_PORT=9002
LAMASSU_BASE_URL=http://localhost:8080/sharing
# Authentication URLs for providers requiring OAuth2 authentication
LAMASSU_BOLT_AUTH_URL=https://mds.bolt.eu/oauth2/token
# How often should feed be updated (in case it's ttl is exceeded) in milliseconds.
LAMASSU_FEED_UPATE_INTERVAL_IN_MS=21600000
# How long a feed should be cached, in case it is not updated in between, in seconds.
LAMASSU_FEED_CACHE_MINIMUM_INTERVAL_IN_S=21600

# redis variables
REDIS_MEMORY_MB=1024

# ipl-db variables
IPL_POSTGIS_IMAGE=postgis/postgis:15-3.3-alpine
IPL_POSTGRES_DB=geoserver
IPL_POSTGRES_USER=geoserver

# x2gbfs variables (Note: when changing the providers, be sure to check if the image version supports them)
X2GBFS_IMAGE=ghcr.io/mobidata-bw/x2gbfs:2024-06-19T12-56
X2GBFS_PROVIDERS=deer,voi-raumobil,lastenvelo_fr,stadtmobil_stuttgart,stadtmobil_karlsruhe,stadtmobil_suedbaden,my-e-car,stadtwerk_tauberfranken
X2GBFS_UPDATE_INTERVAL_SECONDS=60

DEER_API_URL=https://deer.fleetster.de
VOI_API_URL=https://lsd.raumobil.net/Broker/grid?platform=mobidata-bw&source=voi&type=eScooter&hashes=u0ty,u0tz

# dagster variables
DAGSTER_POSTGRES_IMAGE=postgres:15.7-bullseye
DAGSTER_PIPELINE_IMAGE=ghcr.io/mobidata-bw/dagster-pipeline:2024-05-17T14-01
DAGSTER_DAGIT_IMAGE=ghcr.io/mobidata-bw/dagster-dagit:2024-05-17T14-01
DAGSTER_DAEMON_IMAGE=ghcr.io/mobidata-bw/dagster-daemon:2024-07-05T15-39
DAGSTER_POSTGRES_USER=postgres_user
DAGSTER_POSTGRES_DB=postgres_db

# gtfs-db variables
# built from https://github.com/mobidata-bw/postgis-with-pg-plan-filter
IPL_GTFS_DB_IMAGE=ghcr.io/mobidata-bw/postgis-with-pg-plan-filter:2024-05-15T15.25.26-d44ab82
IPL_GTFS_DB_POSTGRES_HOST=gtfs-db
IPL_GTFS_DB_POSTGRES_USER=postgres
IPL_GTFS_DB_POSTGRES_DB=gtfs_importer
IPL_GTFS_DB_POSTGRES_DB_PREFIX=gtfs

# gtfs-importer variables
IPL_GTFS_IMPORTER_IMAGE=ghcr.io/mobidata-bw/postgis-gtfs-importer:2024-02-22t11.37.53-96466fc
IPL_GTFS_IMPORTER_GTFS_DOWNLOAD_URL=https://www.nvbw.de/fileadmin/user_upload/service/open_data/fahrplandaten_mit_liniennetz/bwgesamt.zip
IPL_GTFS_IMPORTER_GTFS_DOWNLOAD_USER_AGENT=MobiData-BW
# This assumes, that the ipl platform is started in a directory `ipl` which's name becomes
# the docker project name and is prefixed to the `ipl` network defined in docker-compose.
# This var need's to be redefined in e.g. `.env.local` if run from a different dir.
IPL_GTFS_IMPORTER_NETWORK=ipl_ipl

# `postgrest` role used by the gtfs-api service (PostgREST)
IPL_GTFS_DB_POSTGREST_USER=postgrest

# pgbouncer variables
PGBOUNCER_IMAGE=bitnami/pgbouncer:1
PGBOUNCER_POSTGRES_USER=postgres

# gtfs-api variables
IPL_GTFS_API_PORT=4000
IPL_GTFS_API_PUBLIC_BASE_URL=http://localhost:8080/gtfs
# > A hard limit to the number of rows PostgREST will fetch from a view, table, or stored procedure. Limits payload size for accidental or malicious requests.
# We expect those people who want to mass-analyse GTFS data to just download the entire GTFS dataset.
IPL_GTFS_API_MAX_ROWS=10000

# gtfs-api-docs variables
IPL_GTFS_API_DOCS_PORT=4001

# Geoserver variables
GEOSERVER_PROXY_BASE_URL=http://localhost:8600/geoserver
GEOSERVER_CSRF_WHITELIST=mobidata-bw.de
GEOSERVER_IMAGE=geosolutionsit/geoserver:2.25.2
GEOSERVER_PORT=8600
GEOSERVER_INITIAL_MEMORY=512M
GEOSERVER_MAXIMUM_MEMORY=4G
# In prod, should switch to PRODUCTION_LOGGING. For other logging profiles see: https://docs.geoserver.org/stable/en/user/configuration/globalsettings.html#config-globalsettings-log-profile
GEOSERVER_LOGGING_PROFILE=DEFAULT_LOGGING

# ocpdb
OCPDB_API_PORT=7000
OCPDB_POSTGRES_USER=ocpdb
OCPDB_POSTGRES_DB=ocpdb
OCPDB_POSTGRES_HOST=ocpdb-db
OCPDB_CELERY_BROKER_URL=amqp://ocpdb-rabbitmq
OCPDB_PRIVACY_URL=https://www.nvbw.de/datenschutz
OCPDB_LEGAL_NOTICE_URL=https://www.nvbw.de/impressum
OCPDB_IMAGE=ghcr.io/binary-butterfly/ocpdb:1.0.0
OCPDB_DB_IMAGE=postgis/postgis:15-3.4-alpine

# ParkAPI
PARK_API_API_PORT=7500
PARK_API_POSTGRES_USER=park-api
PARK_API_POSTGRES_DB=park-api
PARK_API_POSTGRES_HOST=park-api-db
PARK_API_CELERY_BROKER_URL=amqp://park-api-rabbitmq
PARK_API_IMAGE=ghcr.io/parkendd/park-api-v3:0.6.3
PARK_API_DB_IMAGE=postgis/postgis:15-3.4-alpine

# Caddy
CADDY_IMAGE=caddy:2.8.4-alpine

# GoAccess
GOACCESS_IMAGE=allinurl/goaccess:1.9.3
GOACCESS_PORT=8082
GOACCESS_KEEP_LAST_DAYS=60

# SFTP
SFTP_IMAGE=atmoz/sftp:alpine-3.7
SFTP_PORT=10022
