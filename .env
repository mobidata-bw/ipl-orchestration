# UID and GID of the user which should be used to run most services in common uid:gid format. Often something like 1000:1000
# You can determine your this line with your own uid and gid by `echo "DOCKER_LOCAL_USER=$(shell id -u):$(shell id -g)"`
DOCKER_LOCAL_USER=1000:1000

# time zone, must be a valid IANA tz database identifier
# https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
# https://en.wikipedia.org/wiki/Tz_database
TZ=Europe/Berlin

TRANSFORMER_PROXY_IMAGE=ghcr.io/mobidata-bw/ipl-proxy:2025-08-21T05-12
TRANSFORMER_PROXY_PORT=8400

LAMASSU_IMAGE=entur/lamassu:2025-10-06T15-58
LAMASSU_PORT=8500
LAMASSU_ADMIN_PORT=9002
LAMASSU_BASE_URL=http://localhost:8080/sharing
# Authentication URLs for providers requiring OAuth2 authentication
LAMASSU_BOLT_AUTH_URL=https://mds.bolt.eu/oauth2/token
# How often should feed be updated (in case it's ttl is exceeded) in milliseconds.
LAMASSU_FEED_UPATE_INTERVAL_IN_MS=21600000
# How long a feed should be cached, in case it is not updated in between, in seconds.
LAMASSU_FEED_CACHE_MINIMUM_INTERVAL_IN_S=21600

# redis variables
REDIS_MEMORY_MB=1024

# ipl-db variables
IPL_POSTGIS_IMAGE=postgis/postgis:15-3.4-alpine
IPL_POSTGRES_DB=geoserver
IPL_POSTGRES_USER=geoserver

# x2gbfs variables (Note: when changing the providers, be sure to check if the image version supports them)
X2GBFS_IMAGE=ghcr.io/mobidata-bw/x2gbfs:2025-10-20T07-21
X2GBFS_PROVIDERS=deer,lastenvelo_fr,stadtmobil_stuttgart,stadtmobil_karlsruhe,stadtmobil_rhein-neckar,naturenergie_sharing,stadtwerk_tauberfranken,teilauto_neckar-alb,teilauto_biberach,teilauto_schwaebisch_hall,oekostadt_renningen,gruene-flotte_freiburg,flinkster_carsharing,oberschwabenmobil,gmuend_bewegt,coono,free2move_stuttgart,herrenberg_alf,herrenberg_fare,herrenberg_guelf,herrenberg_stadtrad,lara_to_go,swu2go,mikar,ford_carsharing_autohausbaur,einfach_unterwegs,seefahrer_ecarsharing,stadtwerke_wertheim
X2GBFS_UPDATE_INTERVAL_SECONDS=60

DEER_API_URL=https://deer.fleetster.de

MIKAR_API_URL=https://mikar.fleetster.de

# dagster variables
DAGSTER_POSTGRES_IMAGE=postgres:15.12-bullseye
DAGSTER_PIPELINE_IMAGE=ghcr.io/mobidata-bw/dagster-pipeline:2025-08-06T08-42
DAGSTER_DAGIT_IMAGE=ghcr.io/mobidata-bw/dagster-dagit:2025-08-06T08-42
DAGSTER_DAEMON_IMAGE=ghcr.io/mobidata-bw/dagster-daemon:2025-08-06T08-42
DAGSTER_POSTGRES_USER=postgres_user
DAGSTER_POSTGRES_DB=postgres_db

# gtfs-db variables
# built from https://github.com/mobidata-bw/postgis-with-pg-plan-filter
IPL_GTFS_DB_IMAGE=ghcr.io/mobidata-bw/postgis-with-pg-plan-filter:2024-05-15T15.25.26-d44ab82
IPL_GTFS_DB_POSTGRES_HOST=gtfs-db
IPL_GTFS_DB_POSTGRES_USER=postgres
IPL_GTFS_DB_POSTGRES_DB=gtfs_importer
IPL_GTFS_DB_POSTGRES_DB_PREFIX=gtfs

# gtfs-importer variables
IPL_GTFS_IMPORTER_IMAGE=ghcr.io/mobidata-bw/postgis-gtfs-importer:v5-2025-10-22T10.41.11-588c98b
IPL_GTFS_IMPORTER_GTFS_DOWNLOAD_URL=https://www.nvbw.de/fileadmin/user_upload/service/open_data/fahrplandaten_mit_liniennetz/bwgesamt.zip
# To make the GTFS import work within NVBW's IT infrastructure, we must manually resolve the GTFS server's domain.
# Here however, in the default configuration, we set a harmless entry (an RFC 6761 special-use domain) that shouldn't interfere with the IPL operation.
IPL_GTFS_IMPORTER_EXTRA_HOST_HOSTNAME=random.alt
IPL_GTFS_IMPORTER_EXTRA_HOST_IP="127.0.0.1"
IPL_GTFS_IMPORTER_GTFS_DOWNLOAD_USER_AGENT="IPL (MobiData-BW)"
# This assumes, that the ipl platform is started in a directory `ipl` which's name becomes
# the docker project name and is prefixed to the `ipl` network defined in docker-compose.
# This var need's to be redefined in e.g. `.env.local` if run from a different dir.
IPL_GTFS_IMPORTER_NETWORK=ipl_ipl
# Which schema to import into within each GTFS-dataset-specific PostgreSQL DB.
# Note: don't modify this without also adapting etc/gtfs/postprocessing.d/* accordingly.
IPL_GTFS_IMPORTER_SCHEMA=api
# Cost (as calculated by the PostgreSQL query planner) limit to all queries that can be made via gtfs-api.
# 3.000.000 is roughly equivalent to 0.5s-15s.
IPL_GTFS_API_COST_LIMIT=3000000

# `postgrest` role used by the gtfs-api service (PostgREST)
IPL_GTFS_DB_POSTGREST_USER=postgrest

# pgbouncer variables
PGBOUNCER_IMAGE=ghcr.io/mobidata-bw/pgbouncer:2025-09-23t09.49.20_8f052bd
PGBOUNCER_POSTGRES_USER=postgres

# gtfs-api variables
IPL_GTFS_API_IMAGE=postgrest/postgrest:v13.0.8
IPL_GTFS_API_PORT=4000
IPL_GTFS_API_ADMIN_PORT=4002
IPL_GTFS_API_PUBLIC_BASE_URL=http://localhost:8080/gtfs
# > A hard limit to the number of rows PostgREST will fetch from a view, table, or stored procedure. Limits payload size for accidental or malicious requests.
# We expect those people who want to mass-analyse GTFS data to just download the entire GTFS dataset.
IPL_GTFS_API_MAX_ROWS=10000

# gtfs-api-docs variables
IPL_GTFS_API_DOCS_PORT=4001

# Geoserver variables
GEOSERVER_PROXY_BASE_URL=http://localhost:8600/geoserver
GEOSERVER_CSRF_WHITELIST=mobidata-bw.de
GEOSERVER_IMAGE=ghcr.io/mobidata-bw/ipl-geoserver:2.25.3
GEOSERVER_PORT=8600
GEOSERVER_INITIAL_MEMORY=512M
GEOSERVER_MAXIMUM_MEMORY=4G
# In prod, should switch to PRODUCTION_LOGGING. For other logging profiles see: https://docs.geoserver.org/stable/en/user/configuration/globalsettings.html#config-globalsettings-log-profile
GEOSERVER_LOGGING_PROFILE=DEFAULT_LOGGING

# RabbitMQ for OCPDB and ParkAPI
RABBITMQ_VERSION=rabbitmq:3.13

# ocpdb
OCPDB_API_PORT=7000
OCPDB_POSTGRES_USER=ocpdb
OCPDB_POSTGRES_DB=ocpdb
OCPDB_POSTGRES_HOST=ocpdb-db
OCPDB_CELERY_BROKER_URL=amqp://rabbitmq/ocpdb
OCPDB_PRIVACY_URL=https://www.nvbw.de/datenschutz
OCPDB_LEGAL_NOTICE_URL=https://www.nvbw.de/impressum
OCPDB_IMAGE=ghcr.io/binary-butterfly/ocpdb:2.3.0
OCPDB_DB_IMAGE=postgis/postgis:15-3.4-alpine
OCPDB_GUNICORN_WORKER_COUNT=16
OCPDB_CELERY_WORKER_COUNT=2

# ParkAPI
PARK_API_API_PORT=7500
PARK_API_POSTGRES_USER=park-api
PARK_API_POSTGRES_DB=park-api
PARK_API_POSTGRES_HOST=park-api-db
PARK_API_CELERY_BROKER_URL=amqp://rabbitmq/park-api
PARK_API_IMAGE=ghcr.io/parkendd/park-api-v3:0.35.0
PARK_API_DB_IMAGE=postgis/postgis:15-3.4-alpine
PARK_API_GUNICORN_WORKER_COUNT=16
PARK_API_CELERY_WORKER_COUNT=2

# Caddy
CADDY_IMAGE=caddy:2.10.2-alpine

# GoAccess
GOACCESS_IMAGE=allinurl/goaccess:1.9.4
GOACCESS_PORT=8082
GOACCESS_KEEP_LAST_DAYS=60

# SFTP
SFTP_IMAGE=atmoz/sftp:alpine-3.7
SFTP_PORT=10022

# Webcam
# How many days (including the current) should be mirrored.
WEBCAM_KEEP_DAYS=7
WEBCAM_WORKER=10
